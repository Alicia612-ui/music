local aukit = require "aukit"

local speakers = {peripheral.find("speaker")}
if #speakers == 0 then error("No speaker attached") end
if #speakers == 2 and peripheral.getName(speakers[1]) == "right" and peripheral.getName(speakers[2]) == "left" then speakers = {speakers[2], speakers[1]} end

local path = ...
if not path then error("Usage: austream <file/URL> [arguments for PCM/DFPWM]") end
local params = select(2, ...)
local v = {}
if params then
    local fn, err = load("return {" .. params:gsub("[^%w,=\"%.]+", "") .. "}", "=unserialize", "t", setmetatable({}, {__index = function(_, idx) return idx end}))
    if not fn then error(err) end
    v = fn()
end
local mono = v.mono or #speakers == 1
aukit.defaultInterpolation = v.interpolation or aukit.defaultInterpolation

-- 封装音频加载和解码逻辑
local function initAudio()
    local data
    if path:match("^https?://") then
        local handle, err = http.get(path, nil, true)
        if not handle then error("Could not connect to " .. path .. ": " .. err) end
        local code = handle.getResponseCode()
        if code ~= 200 then handle.close() error("Could not connect to " .. path .. ": HTTP " .. code) end
        data = handle.readAll()
        handle.close()
    elseif path:match("^wss?://") then
        error("Websocket streaming not supported in loop mode")
    elseif path:match("^rednet://%d+") or path:match("^rednet%+%l+://%d+") then
        peripheral.find("modem", rednet.open)
        local proto, id, name = path:match("^rednet%+?(%l*)://(%d+)(/?.*)$")
        id = tonumber(id)
        if proto == "" then proto = nil end
        if path ~= "" and id >= 0 then rednet.send(id, name, proto) end
        error("Rednet streaming not supported in loop mode")
    else
        path = shell.resolve(path)
        local file, err = fs.open(path, "rb")
        if not file then error("Could not open " .. path .. ": " .. err) end
        data = file.readAll()
        file.close()
    end

    -- 解码音频数据
    local iter, length
    if type(v.type) == "string" then v.type = v.type:lower() end
    if v.type == "dfpwm" or path:lower():match("%.dfpwm$") then iter, length = aukit.stream.dfpwm(data, v.sampleRate, v.channels, mono)
    elseif v.type == "mdfpwm" or path:lower():match("%.mdfpwm$") then iter, length = aukit.stream.mdfpwm(data, mono)
    elseif v.type == "wav" or path:lower():match("%.wav$") then iter, length = aukit.stream.wav(data, mono, v.ignoreHeader)
    elseif v.type == "aiff" or path:lower():match("%.aiff?$") then iter, length = aukit.stream.aiff(data, mono, v.ignoreHeader)
    elseif v.type == "au" or path:lower():match("%.au$") then iter, length = aukit.stream.au(data, mono, v.ignoreHeader)
    elseif v.type == "flac" or path:lower():match("%.flac$") then iter, length = aukit.stream.flac(data, mono)
    elseif v.type == "qoa" or path:lower():match("%.qoa$") then iter, length = aukit.stream.qoa(data, mono)
    elseif v.type == "pcm" or path:lower():match("%.pcm$") or path:lower():match("%.raw$") or path:match("^rednet%+?%l*://") then iter, length = aukit.stream.pcm(data, v.bitDepth, v.dataType, v.channels, v.sampleRate, v.bigEndian, mono)
    else error("Unknown file type. Make sure to add the right file extension to the path/URL.") end
    if length == nil then length = 0 end
    
    return iter, length
end

-- 播放函数
local function playAudio(iter, length)
    local w = term.getSize()
    local y = select(2, term.getCursorPos())
    local fg, bg = colors.toBlit(term.getTextColor()), colors.toBlit(term.getBackgroundColor())
    
    aukit.play(iter, function(pos)
        pos = math.min(pos, 5999)
        local p = pos / length
        term.setCursorPos(1, y)
        if p > 1 then
            term.blit(("%02d:%02d %s --:--"):format(math.floor(pos / 60), pos % 60, (" "):rep(w - 12)), fg:rep(w), bg:rep(6) .. fg:rep(w - 12) .. bg:rep(6))
        else
            term.blit(("%02d:%02d %s%s %02d:%02d"):format(math.floor(pos / 60), pos % 60, (" "):rep(math.floor((w - 12) * p)), ("\127"):rep((w - 12) - math.floor((w - 12) * p)), math.floor(length / 60), length % 60),
                fg:rep(w), bg:rep(6) .. fg:rep(math.floor((w - 12) * p)) .. bg:rep((w - 12) - math.floor((w - 12) * p) + 6))
        end
    end, v.volume, table.unpack(speakers))
end

-- 主循环
print("Streaming... (Press Ctrl+T to stop)")
local isPlaying = true
while isPlaying do
    local iter, length = initAudio()
    playAudio(iter, length)
    
    -- 估算播放时间并等待
    local duration = length / (v.sampleRate or 44100)  -- 估算播放时长（秒）
    local startTime = os.clock()
    while os.clock() - startTime < duration do
        local ev, p1 = os.pullEvent()
        if ev == "terminate" then
            aukit.stop()  -- 假设 aukit 有 stop 方法
            print("\nStopped.")
            isPlaying = false
            break
        end
    end
end
